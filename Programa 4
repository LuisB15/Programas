#include <stdlib.h>
#include <stdio.h>

struct {
    double re;
    double im;
} typedef complex;

complex zadd(complex z1, complex z2){
    complex result = {z1.re + z2.re , z1.im + z2.im};
    return result;
}
complex zsub(complex z1, complex z2){
    complex result = {z1.re - z2.re , z1.im - z2.im};
    return result;
}
complex zmul(complex z1, complex z2){
    double rr = 0 , ri = 0;
    
    rr = (z1.re * z2.re)-(z1.im * z2.im);
    
    ri = (z1.re * z2.im)+(z2.re * z1.im);
    
    complex result = {rr , ri};
    
    return result;
}
complex zdiv(complex z1, complex z2){
    double rr = 0, ri = 0;
    float denom = (z2.re * z2.re) + (z2.im * z2.im);
    rr = ((z1.re * z2.re) + (z1.im * z2.im)) / denom;
    ri = ((z2.re * z1.im) - (z1.re* z2.im))/denom;
    
    complex result ={rr,ri};
    return result;
    
};
complex zpot(complex z1 , int pot){
    
    complex result = z1;
    
    for (int i=1;i<pot;++i){
        
        
        result = zmul(result, z1);
    }
    if (pot == 0){
        complex result = {1,0};
        return result;
    }
    return result;
}


int parse(char* s, complex *z);


/* MAIN *********************************************************/
int main(int argc, char** argv){
    complex z;       /* Stores the result */
    complex z1, z2;  /* Store the operands z1 and z2 */

    // Program needs exactly 3 arguments: z1 op z2
    if(argc != 4) return -1;

    // Read operands z1 and z2
    if(!parse(argv[1], &z1)) return -1;
    if(!parse(argv[3], &z2)) return -1;

    // Read operator op. We care only about first character
    switch(argv[2][0]){
        case '+':
            z = zadd(z1, z2); break;
        case '-':
            z = zsub(z1, z2); break;
        case 'x':
        case '*': // <- * special char in bash needs to be escaped, use x instead
            z = zmul(z1, z2); break;
        case '/':
            z = zdiv(z1, z2); break;
        case '^':
            z = zpot(z1, (double)z2.re); break;
        default:
            return -1;
    }
    printf("%0.4f%+0.4fi\n", z.re, z.im);
    return 0;
}

/* FUNCTION DEFINITIONS *****************************************/

int parse(char* s, complex *z){
    char* bcc = s;
    char* cc;
    double dtemp;
    // init z
    z->re = 0; z->im = 0;
    if (s == NULL) return 0;
    if(*s == 'i'){
        z->im =1;
        return 1;
    }
    // Convert real part
    dtemp = strtod(bcc, &cc);
    if(*cc == '\0'){
        z->re = dtemp;
        return 1;
    }else if (*cc == 'i'){
        z->im = dtemp;
        return 1;
    }else
        z->re=dtemp;
    // Convert imaginary part
    if ((*cc != '+') && (*cc != '-')) return 0;
    bcc = cc;
    z->im = strtod(bcc, &cc);
    if(*cc == 'i') return 1;
    
    
    return 0;
}

